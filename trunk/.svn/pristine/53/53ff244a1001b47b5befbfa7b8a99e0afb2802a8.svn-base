package com.payease.scfordermis.service.impl;

import com.payease.scfordermis.bo.ResultBo;
import com.payease.scfordermis.bo.requestBo.ReqEmpAccNumBean;
import com.payease.scfordermis.dao.EmployeeInfoDao;
import com.payease.scfordermis.entity.TEmployeeInfoEntity;
import com.payease.scfordermis.service.EmpAccNumService;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.*;

/**
 * @Created By liuxiaoming
 * @CreateTime 2018/1/15 下午1:55
 **/
@Service
public class EmpAccNumServiceImpl implements EmpAccNumService {

    @Autowired
    EntityManager em;

    @Autowired
    EmployeeInfoDao employeeInfoDao;


    /**
     * 员工列表查询
     * @param
     * @return
     */
    @Override
    public ResultBo getEmpAccNumList(ReqEmpAccNumBean req) {

       ResultBo result = ResultBo.build();
        //入参
        /**
         *         json.put("depParentId",depParentId);
                    json.put("departmentId", departmentId);
                    json.put("other", other);
                    json.put("page",super.page);
                    json.put("size",super.size);
         */
        Map<String,Object> map = req.getMap();
        //分页                                     当前页               每页显示条数    按照字段排序
        Pageable pageable = new PageRequest(req.getPage() - 1, req.getSize(), new Sort(Sort.Direction.DESC, "id"));
        Page<TEmployeeInfoEntity> page = employeeInfoDao.findAll(
                new Specification<TEmployeeInfoEntity>() {

                    public Predicate toPredicate(Root<TEmployeeInfoEntity> root,
                                                 CriteriaQuery<?> query, CriteriaBuilder cb) {
                        List<Predicate> lstPredicates = new ArrayList<Predicate>();
                        if (StringUtils.isNotBlank(String.valueOf(map.get("depParentId")))){
                            if((Integer)map.get("depParentId") != 0){
                                //                                    映射实体类字段                              请求入参字段
                                lstPredicates.add(cb.equal(root.get("fDepartIdOne").as(Integer.class), map.get("depParentId")));
                            }else{
                                lstPredicates.add(cb.equal(root.get("fDepartIdTwo").as(Integer.class), map.get("departmentId")));
                            }
                        }
                        if (StringUtils.isNotBlank(String.valueOf(map.get("other")))) {
                            lstPredicates.add(cb.equal(root.get("fSearchKey").as(String.class), map.get("other").toString()));
                        }
                        Predicate[] arrayPredicates = new Predicate[lstPredicates.size()];
                        return cb.and(lstPredicates.toArray(arrayPredicates));
                    }
                }, pageable);

        result.setResultBody(page);
        return result;

    }
}
