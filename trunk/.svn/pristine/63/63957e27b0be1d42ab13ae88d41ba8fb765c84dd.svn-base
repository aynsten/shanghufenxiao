package com.payease.scfordermis.service.impl;

import com.alibaba.fastjson.JSON;
import com.payease.scfordermis.bean.PageRequest;
import com.payease.scfordermis.bo.requestBo.ReqDistributionOrderBo;
import com.payease.scfordermis.bo.requestBo.ReqSaveOrUpdateOrderBo;
import com.payease.scfordermis.bo.responseBo.*;
import com.payease.scfordermis.dao.OrderDao;
import com.payease.scfordermis.entity.TOrderEntity;
import com.payease.scfordermis.service.IDistributionOrderService;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.Predicate;
import javax.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by lch on 2018/1/15.
 * <p>
 * 集散地订单service实现
 */
@Service
public class DistributionOrderServiceImpl implements IDistributionOrderService {

    @Autowired
    private OrderDao orderDao;

    @Override
    public Page<RespDistributionOrderBo> orderList(HttpSession session, ReqDistributionOrderBo reqDistributionOrderBo) {
        //获取session中的companyId
        //判断入参是否为空，如果不为空，将其作为条件添加
        //将companyId作为条件
        //根据条件查询订单
        Specification specification = (Specification<ReqDistributionOrderBo>) (root, criteriaQuery, criteriaBuilder) -> {

            List<Predicate> predicates = new ArrayList<>();
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getOrderNum())) {
                predicates.add(criteriaBuilder.equal(root.get("fOrderNum"), reqDistributionOrderBo.getOrderNum()));
            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getBeginTime())) {
                predicates.add(criteriaBuilder.greaterThan(root.get("fCreatetime"), reqDistributionOrderBo.getBeginTime()));
            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getEndTime())) {
                predicates.add(criteriaBuilder.lessThan(root.get("fCreatetime"), reqDistributionOrderBo.getEndTime()));
            }
//            if (StringUtils.isNotBlank(reqDistributionOrderBo.getConsumerName())) {
//                predicates.add(criteriaBuilder.equal(root.get("subscribeTime"), reqDistributionOrderBo.getConsumerName()));
//            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getCustomerLevelId())) {
                predicates.add(criteriaBuilder.equal(root.get("subscribeTime"), reqDistributionOrderBo.getCustomerLevelId()));
            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getTransportInfo())) {
                predicates.add(criteriaBuilder.equal(root.get("subscribeTime"), reqDistributionOrderBo.getTransportInfo()));
            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getLevel())) {
                predicates.add(criteriaBuilder.equal(root.get("subscribeTime"), reqDistributionOrderBo.getLevel()));
            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getOrderStatus())) {
                predicates.add(criteriaBuilder.equal(root.get("subscribeTime"), reqDistributionOrderBo.getOrderStatus()));
            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getPayStatus())) {
                predicates.add(criteriaBuilder.equal(root.get("subscribeTime"), reqDistributionOrderBo.getPayStatus()));
            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getSearchKey())) {
                predicates.add(criteriaBuilder.like(root.get("nickname"), "%" + reqDistributionOrderBo.getSearchKey() + "%"));
            }
            if (StringUtils.isNotBlank(reqDistributionOrderBo.getOrderState())) {
                predicates.add(criteriaBuilder.equal(root.get("subscribeTime"), reqDistributionOrderBo.getOrderState()));
            }
            predicates.add(criteriaBuilder.equal(root.get("fCompanyId"), session.getAttribute("companyId")));
            return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
        };
        Sort sort = new Sort(Sort.Direction.DESC, "fCreatetime");
        Page<TOrderEntity> orderList = this.orderDao.findAll(specification, PageRequest.of(reqDistributionOrderBo.getPage(), reqDistributionOrderBo.getSize(), sort));
        List<RespDistributionOrderBo> respDistributionOrderBoList = new ArrayList<>();
        for (TOrderEntity tOrderEntity : orderList.getContent()) {
            RespDistributionOrderBo respDistributionOrderBo = new RespDistributionOrderBo();
            BeanUtils.copyProperties(tOrderEntity, respDistributionOrderBo);
            respDistributionOrderBoList.add(respDistributionOrderBo);
        }
        Page<RespDistributionOrderBo> respDistributionOrderBos = new PageImpl<>(respDistributionOrderBoList, PageRequest.of(reqDistributionOrderBo.getPage(), reqDistributionOrderBo.getSize()), orderList.getTotalElements());
        System.out.println(JSON.toJSONString(respDistributionOrderBos));
        return respDistributionOrderBos;
    }


    @Override
    public List<RespCustomerLevelBo> customerLevelList(HttpSession session) {
        //获取session中的companyId
        //根据companyId查询客户等级
        return null;
    }

    @Override
    public List<RespAreaInfoBo> salesAreaList(HttpSession session) {
        //获取session中的companyId
        //根据companyId查询销售地区
        return null;
    }

    @Override
    public List<RespDistributionBo> distributionList(HttpSession session) {
        //获取session中的companyId
        //orderStatus为待装车、待提货的作为条件
        //将companyId作为条件
        //根据条件查询集散地运单
        return null;
    }

    @Override
    public List<RespCustomerBo> customerList(HttpSession session) {
        //获取session中的companyId
        //根据companyId查询客户
        return null;
    }

    @Override
    public List<RespProductBo> productList(Long transportId) {

        return null;
    }

    @Override
    public List<RespOperationLogBo> operationLog(Long orderId) {
        //根据orderId查询操作日志
        return null;
    }

    @Override
    public void addNote(HttpSession session, Long orderId, String content) {
        //新增备注
    }

    @Override
    public RespOrderDetailsBo orderDetails(Long orderId) {
        //根据orderId查询订单详情
        return null;
    }

    @Override
    public List<RspPaymentRecordsBo> paymentRecords(Long orderId) {
        //根据orderId查询收款记录
        return null;
    }

    @Override
    public void orderReviewOrCancellation(Long orderId, String type, String cancellationReason) {
        //根据type判断本次操作是审核还是作废
        //如果是审核，根据orderId
    }

    @Override
    public void orderSaveOrUpdate(HttpSession session, ReqSaveOrUpdateOrderBo reqSaveOrUpdateOrderBo) {


    }
}
