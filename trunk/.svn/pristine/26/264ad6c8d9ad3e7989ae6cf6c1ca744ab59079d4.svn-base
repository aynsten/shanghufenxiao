package com.payease.scfordermis.service.impl;



import com.payease.scfordermis.bean.Status;
import com.payease.scfordermis.bo.ResultBo;
import com.payease.scfordermis.bo.requestBo.ReqLoginPCBean;
import com.payease.scfordermis.bo.responseBo.RespLoginPCBean;
import com.payease.scfordermis.dao.DepartmentInfoDao;
import com.payease.scfordermis.dao.EmployeeInfoDao;
import com.payease.scfordermis.dao.EmployeeRoleDao;
import com.payease.scfordermis.dao.RoleInfoDao;
import com.payease.scfordermis.entity.TDepartmentInfoEntity;
import com.payease.scfordermis.entity.TEmployeeInfoEntity;
import com.payease.scfordermis.entity.TEmployeeRoleEntity;
import com.payease.scfordermis.entity.TRoleInfoEntity;
import com.payease.scfordermis.service.LoginPCService;
import com.payease.scfordermis.utils.MD5;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;



import javax.servlet.http.HttpSession;
import java.util.List;

/**
 * Created by zhoushijie on 2018/1/15.
 */
@Service
public class LoginPCServiceImpl implements LoginPCService {
    private static final Logger log = LoggerFactory.getLogger(LoginPCServiceImpl.class);
    @Autowired
    EmployeeInfoDao employeeInfoDao;
    @Autowired
    EmployeeRoleDao employeeRoleDao;
    @Autowired
    RoleInfoDao roleInfoDao;
    @Autowired
    DepartmentInfoDao departmentInfoDao;

    @Override
    public ResultBo login(HttpSession session,ReqLoginPCBean reqLoginPCBean)throws Exception{
        ResultBo result =ResultBo.build();
        try{
            //判断是否为空
            result= checkIsNull(reqLoginPCBean);
            //根据用户名查询用户信息
            List<TEmployeeInfoEntity> list = employeeInfoDao.findByFAccount(reqLoginPCBean.getfAccount());
            if (list == null || list.size()==0){return result.setCodeId(Status.CHECKACCOUNTSTATUS);}

            //获取数据库中对象
            TEmployeeInfoEntity entity = list.get(0);
            if (entity == null){return result.setCodeId(Status.CHECKISNULL);}

            //  从数据库中获取  如果账号状态close-禁用                   是否删除 yes-删除
            if ("close".equals(entity.getfStatus()) && "yes".equals(entity.getfIsDelete())){return result.setCodeId(Status.CHECKACCOUNTSTATUS);}

            //判断密码是否正确    入参pwd 进行加密                   数据库存储pwd
            if (!MD5.encode(reqLoginPCBean.getfPassword()).equals(entity.getfPassword())){return result.setCodeId(Status.CHECKPWDERROR);}
            //获取用户信息
            result = getUserInfo(session, entity);

        }catch (Exception e){
            e.printStackTrace();
            log.error("getIndexImages",e);
            result.setCodeId(Status.QUERYERROR);
            throw e;
        }finally {
            return result;
        }
    }

    /**
     * 判断是否为空
     * @param reqLoginPCBean
     * @return
     * @throws Exception
     */
    private ResultBo checkIsNull(ReqLoginPCBean reqLoginPCBean)throws Exception{
        ResultBo result =ResultBo.build();
        //判断是否是空值
        if (reqLoginPCBean == null){
            return  result.setCodeId(Status.QUERYERROR);
        }
        //判断账号是否是空值
        if (StringUtils.isBlank(reqLoginPCBean.getfAccount())){
            return  result.setCodeId(Status.CHECKACCOUNTSTATUS);
        }
        //判断是密码否是空值
        if (StringUtils.isBlank(reqLoginPCBean.getfPassword())){
            return result.setCodeId(Status.CHECKPWDNULL);
        }
        return result;
    }

    /**
     * 用户信息获取
     * @param session
     * @param entity
     * @return
     * @throws Exception
     */
    private ResultBo getUserInfo(HttpSession session,TEmployeeInfoEntity entity)throws Exception{
        ResultBo result = ResultBo.build();
        RespLoginPCBean resp = new RespLoginPCBean();//出参对象
        //获取姓名
        resp.setfName(entity.getfName());
        // 通过员工ID 查员工角色关系（t_employee_role）表中的角色ID  再通过角色ID查角色信息（t_role_info）表中的菜单权限
        //查找角色id
        List<TEmployeeRoleEntity> byFEmployeeIdList = checkEnployeeId(entity);
        if (byFEmployeeIdList == null || byFEmployeeIdList.size() ==0){return result.setCodeId(Status.CHECKROLEIDISNULL);}
        //查找角色关系id
        TEmployeeRoleEntity tEmployeeRoleEntity = byFEmployeeIdList.get(0);
        //角色信息获取权限
        TRoleInfoEntity roleInfoEntity = roleInfoDao.findOne(tEmployeeRoleEntity.getfRoleId());
        if (roleInfoEntity == null){return result.setCodeId(Status.CHECKROLEINFOERROR);}
        //菜单权限
        resp.setfMenus(new String[]{roleInfoEntity.getfMenus()});

        resp.setfAccount(entity.getfAccount());//账号
        resp.setfDepartId(String.valueOf(entity.getfDepartIdTwo()));
        //部门名称 通过部门id查询部门表(TDepartmentInfo)
        TDepartmentInfoEntity departmentInfoEntity = departmentInfoDao.findOne(entity.getfDepartIdTwo());
        if (departmentInfoEntity ==null){return result.setCodeId(Status.CHECKDEPARTMENTINFOERROR);}
        resp.setfDepartName(departmentInfoEntity.getfName());
        resp.setfPosition(entity.getfPosition());
        resp.setfName(entity.getfName());
        resp.setfMobile(entity.getfPosition());
        resp.setfEmail(entity.getfEmail());
        resp.setfQq(entity.getfQq());
        resp.setfCompanyId(entity.getfCompanyId());
        resp.setfId(entity.getfId());
        resp.setfStatus(entity.getfStatus());
        resp.setfIsDelete(entity.getfIsDelete());
        session.setAttribute("userInfo",resp);
        result.setResultBody(resp);
        return result;
    }

    /**
     * 查找角色ID
     * @param entity
     * @return
     */
    private List<TEmployeeRoleEntity> checkEnployeeId(TEmployeeInfoEntity entity)throws Exception{
        List<TEmployeeRoleEntity> byFEmployeeIdList = employeeRoleDao.findByFEmployeeId(entity.getfId());
        return byFEmployeeIdList;
    }









    //==================================================================================================
    /**
     * 登出
     * @return
     */
    @Override
    public ResultBo logout(HttpSession session) throws Exception{
        ResultBo result=ResultBo.build();
        try{
            session.removeAttribute("userInfo");
        }catch (Exception e){
            e.printStackTrace();
            log.error("getIndexImages",e);
            result.setCodeId(Status.QUERYERROR);
            throw e;
        }finally {
            return result;
        }
    }
}



