package com.payease.scfordermis.service.impl;

import com.payease.scfordermis.bo.ResultBo;
import com.payease.scfordermis.dao.RoleInfoDao;
import com.payease.scfordermis.entity.TRoleInfoEntity;
import com.payease.scfordermis.service.RoleAuthService;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpSession;
import java.util.Date;

/**
 * 首页-设置-角色权限
 * @Created By liuxiaoming
 * @CreateTime 2018/1/15 下午1:55
 **/
@Service
public class RoleAuthServiceImpl implements RoleAuthService {

    private static final Logger log = LoggerFactory.getLogger(RoleAuthServiceImpl.class);

    @Autowired
    RoleInfoDao roleInfoDao;

    /**
     * 角色名字修改接口
     */
    @Override
    public ResultBo saveName(HttpSession session, Long roleId, String roleName) throws Exception{
        ResultBo result = ResultBo.build();
        try{
        Long fCompanyId = Long.valueOf("1");
        //todo   Long fCompanyId
//        Long fCompanyId = (Long) session.getAttribute("fCompanyId");
//        if(session.getAttribute("fCompanyId") == null){
//            return result.fail();
//        }
        Long sessionId = Long.valueOf("1");
        //todo   Long sessionId
//        if(session.getAttribute("fId") == null){
//            return result.fail();
//        }

        if(StringUtils.isBlank(roleName)){
            result.fail();
            result.setMessage("角色名称不能为空");
            log.error("RoleAuthService - - saveName :角色名称不能为空");
            return result;
        }
        if(roleName.equals("系统管理员")){
            result.fail();
            result.setMessage("角色名称不允许是系统管理员");
            log.error("RoleAuthService - - saveName :角色名称不允许是系统管理员");
            return result;
        }
        if(roleInfoDao.countByFName(roleName) != 0){
            result.fail();
            result.setMessage("角色名称重复");
            log.error("RoleAuthService - - saveName :角色名称重复");
            return result;
        }

        TRoleInfoEntity one = roleInfoDao.findOne(roleId);

        if(one == null){
            result.fail();
            result.setMessage("未查询到该条数据");
            log.error("RoleAuthService - - saveName :未查询到该条数据");
            return result;
        }

        if(one.getfName().equals("系统管理员")){
            result.fail();
            result.setMessage("系统管理员角色不允许改名");
            log.error("RoleAuthService - - saveName :系统管理员角色不允许改名");
            return result;
        }

        one.setfName(roleName);
        one.setfOperate(sessionId);
        one.setfCompanyId(fCompanyId);
        one.setfUpdateTime(new Date());
        roleInfoDao.save(one);
    }catch (Exception e){
        e.printStackTrace();
        result.fail();
        log.error("RoleAuthService - - saveName :",e);
        throw e;
    }
        return result;
    }

    /**
     * 角色权限修改接口
     */
    @Override
    public ResultBo saveAuth(HttpSession session, Long roleId, String roleMenus) throws Exception{

        ResultBo result = ResultBo.build();
        try {
            TRoleInfoEntity one = roleInfoDao.findOne(roleId);

            if (one == null) {
                return result.fail();
            }
            if (StringUtils.isBlank(roleMenus)) {
                return result.fail();
            }
            Long fCompanyId = Long.valueOf("1");
            //todo   Long fCompanyId
//        Long fCompanyId = (Long) session.getAttribute("fCompanyId");
//        if(session.getAttribute("fCompanyId") == null){
//            return result.fail();
//        }
            Long sessionId = Long.valueOf("1");
            //todo   Long sessionId
//        if(session.getAttribute("fId") == null){
//            return result.fail();
//        }


            one.setfMenus(roleMenus);
            one.setfOperate(sessionId);
            one.setfCompanyId(fCompanyId);
            one.setfUpdateTime(new Date());
            roleInfoDao.save(one);
        }catch (Exception e){
                e.printStackTrace();
                result.fail();
                log.error("RoleAuthService - - saveAuth :",e);
                throw e;
        }
        return result;
    }


    /**
     * 角色权限明细接口
     */
    @Override
    public ResultBo authDetail(HttpSession session, Long roleId) throws Exception{
        ResultBo result = ResultBo.build();
        try{
        TRoleInfoEntity one = roleInfoDao.findOne(roleId);
        if(one == null){
            return result.fail();
        }
            result.setResultBody(
                    StringUtils.isNotBlank(one.getfMenus())?one.getfMenus():""
            );

        }catch (Exception e){
        e.printStackTrace();
        result.fail();
        log.error("RoleAuthService - - authDetail :",e);
        throw e;
    }
        return result;
    }




}
