package com.payease.scfordermis.controller;

import com.payease.scfordermis.bo.ResultBo;
import com.payease.scfordermis.bo.requestBo.PageBean;
import com.payease.scfordermis.bo.requestBo.ReqCustomerBean;
import com.payease.scfordermis.bo.requestBo.ReqEmpCustomerBean;
import com.payease.scfordermis.bo.responseBo.RespCustomerBean;
import com.payease.scfordermis.bo.responseBo.RespEmpCustomerBean;
import com.payease.scfordermis.bo.responseBo.RespLevelBean;
import com.payease.scfordermis.entity.TConsumerInfoEntity;
import com.payease.scfordermis.service.CustomerService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by admin on 2018/1/10.
 */
@RestController
@RequestMapping("/customer")
@Api(tags = {"客户管理-郑强威"})
public class CustomerController {
    private static final Logger log = LoggerFactory.getLogger(CustomerController.class);

    @Autowired
    private  CustomerService  customerService;

    @GetMapping(value = "index")
    @ApiOperation(value = "获取所有客户信息",response = ResultBo.class)
    @ApiImplicitParams({
    })
    public ResultBo getCustomerAll(ReqCustomerBean reqCustomerBean) {
        ResultBo result = ResultBo.build();
        try {
            RespCustomerBean respCustomerBean  = customerService.selectIndext(reqCustomerBean);
            result.setResultBody(respCustomerBean);
        } catch (Exception e) {
            e.printStackTrace();
            log.error("getCustomerAll",e);
            result.fail();
        }
        return result;
    }

    @DeleteMapping(value = "delete")
    @ApiOperation(value = "客户删除接口")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "fid",value = "客户id",paramType = "query"),
    })
    public ResultBo deleteCustomerA(String fid) {
        ResultBo result = ResultBo.build();
        try {
            if (fid ==null || fid.isEmpty()){
                result.setResultBody("id不能为空");
            }else {
                customerService.isDelete(Long.valueOf(fid));
                result.setResultBody("删除成功");
            }
        } catch (Exception e) {
               e.printStackTrace();
              log.error("deleteCustomerA",e);
               result.fail();
        }
        return result;
    }

    @GetMapping(value = "details")
    @ApiOperation(value = "获取客户详情",response = ResultBo.class)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "fid",value = "客户id",paramType = "query"),
    })
    public ResultBo getDetails(String fid) {
        ResultBo result = ResultBo.build();
        try {
            if (fid!=null || !fid.isEmpty()){
                TConsumerInfoEntity tConsumerInfoEntity =  customerService.getDetail(Long.valueOf(fid));
                result.setResultBody(tConsumerInfoEntity);
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.error("getDetails",e);
            result.fail();
        }
        return result;
    }

    @PostMapping(value = "upsave")
    @ApiOperation(value = "添加修改客户信息接口",response = ResultBo.class)
    @ApiImplicitParams({
    })
    public ResultBo upAndSave(HttpSession session,TConsumerInfoEntity tConsumerInfoEntity) {
        ResultBo result = ResultBo.build();
        try {
            customerService.upAndSave(session,tConsumerInfoEntity);
            result.setResultBody("保存成功");
        } catch (Exception e) {
            e.printStackTrace();
            log.error("upAndSave",e);
            result.fail();
        }
        return result;
    }


}
